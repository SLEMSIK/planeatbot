import logging
import telebot
from telebot import types
import config
import database
import requests
from io import BytesIO
import schedule
import time
import random
import threading

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    chat_id = message.chat.id
    
    if not database.user_exists(user_id):
        database.add_user(user_id, username, first_name, last_name, chat_id)
        welcome_message = f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
        welcome_message += "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PlanEat ‚Äì —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è! ü•ó\n\n –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:\n‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ üìä\n‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–∞—Ü–∏–æ–Ω üçé\n‚Ä¢ –î–æ—Å—Ç–∏–≥–∞—Ç—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é üéØ\n\n –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /reg"
        bot.reply_to(message, welcome_message)
    else:
        welcome_back_message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! üéâ\n\n –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤ PlanEat. –ü—Ä–æ–¥–æ–ª–∂–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ! üí™"
        bot.reply_to(message, welcome_back_message)

@bot.message_handler(commands=['reg'])
def reg(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    chat_id = message.chat.id

    if not database.user_exists(user_id):
        database.add_user(user_id, username, first_name, last_name, chat_id)
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏: \n‚Ä¢ /plan - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n‚Ä¢ /recipe - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞\n‚Ä¢ /track - –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π\n‚Ä¢ /help - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    else:
        bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

@bot.message_handler(commands=['plan'])
def plan(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('–ü–æ—Ö—É–¥–µ–Ω–∏–µ üîΩ')
    btn2 = types.KeyboardButton('–ù–∞–±–æ—Ä –º–∞—Å—Å—ã üîº')
    btn3 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞ ‚öñÔ∏è')
    markup.add(btn1, btn2, btn3)
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['–ü–æ—Ö—É–¥–µ–Ω–∏–µ üîΩ', '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã üîº', '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞ ‚öñÔ∏è'])
def create_plan(message):
    goal = message.text.split(' ')[0]  
    
    meal_plan = database.get_meal_plan(goal)
    
    if meal_plan:
        days = {}
        for day, meal, dish, calories in meal_plan:
            if day not in days:
                days[day] = []
            days[day].append((meal, dish, calories))
        
        plan_text = f"üìã –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è {goal.lower()}:\n\n"
        
        for day in sorted(days.keys()):
            plan_text += f"üî∏ {day}:\n"
            for meal, dish, calories in days[day]:
                plan_text += f"  ‚Ä¢ {meal}: {dish} ({calories} –∫–∫–∞–ª)\n"
            plan_text += "\n"
            
        plan_text += "... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"
    else:
        plan_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ª–∏."
    
    markup = types.ReplyKeyboardRemove()
    bot.reply_to(message, plan_text, reply_markup=markup)
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –±–ª—é–¥ –∏–∑ –ø–ª–∞–Ω–∞? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /recipe")

@bot.message_handler(commands=['recipe'])
def recipe(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–ó–∞–≤—Ç—Ä–∞–∫ üç≥')
    btn2 = types.KeyboardButton('–û–±–µ–¥ üç≤')
    btn3 = types.KeyboardButton('–£–∂–∏–Ω üçΩÔ∏è')
    btn4 = types.KeyboardButton('–î–µ—Å–µ—Ä—Ç üç∞')
    btn5 = types.KeyboardButton('–ù–∞–ø–∏—Ç–æ–∫ ü•§')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –±–ª—é–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['–ó–∞–≤—Ç—Ä–∞–∫ üç≥', '–û–±–µ–¥ üç≤', '–£–∂–∏–Ω üçΩÔ∏è', '–î–µ—Å–µ—Ä—Ç üç∞', '–ù–∞–ø–∏—Ç–æ–∫ ü•§'])
def get_recipe(message):
    meal_type = message.text.split(' ')[0]  
    
    recipe = database.get_recipe(meal_type)
    
    if recipe:
        image_sent = False
        if recipe['image_url']:
            try:
                headers = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Accept': 'image/jpeg,image/png,image/*;q=0.8,*/*;q=0.5',
                    'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
                    'Referer': 'https://www.google.com/'
                }
                bot.send_photo(message.chat.id, recipe['image_url'])
                image_sent = True
                logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π URL –¥–ª—è: {recipe['name']}")
            except Exception as e1:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π URL: {str(e1)}")
                
                try:
                    response = requests.get(recipe['image_url'], headers=headers, stream=True, timeout=10)
                    
                    if response.status_code == 200:
                        content = response.content
                        if content and len(content) > 100:  
                            photo = BytesIO(content)
                            photo.name = f"{recipe['name']}.jpg"
                            bot.send_photo(message.chat.id, photo)
                            image_sent = True
                            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ BytesIO –¥–ª—è: {recipe['name']}")
                        else:
                            logging.error(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: {recipe['name']}")
                    else:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {recipe['name']}, –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                except Exception as e2:
                    logging.error(f"–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e2)}")
        
        response = f"üçΩÔ∏è *{recipe['name']}*\n\n"
        if not image_sent:
            response += "*–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n\n"
        
        response += "*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n"
        for ingredient in recipe['ingredients']:
            response += f"‚Ä¢ {ingredient}\n"
        response += f"\n*–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:*\n{recipe['instructions']}\n\n"
        response += f"*–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:* {recipe['calories']}"
        
        markup = types.ReplyKeyboardRemove()
        bot.reply_to(message, response, parse_mode="Markdown", reply_markup=markup)
    else:
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–ª—é–¥–∞.")

@bot.message_handler(commands=['track'])
def track(message):
    markup = types.ForceReply(selective=True)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –µ–≥–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∏–ª–∏ –≤–µ—Å, —á—Ç–æ–±—ã —è –ø–æ–¥—Å—á–∏—Ç–∞–ª –∫–∞–ª–æ—Ä–∏–∏:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.reply_to_message and message.reply_to_message.text.startswith("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"))
def calculate_calories(message):
    food_text = message.text.lower()
    
    calories = 0
    protein = 0
    fats = 0
    carbs = 0
    
    food_data = database.get_food_data()
    
    found_foods = []
    for food in food_data:
        if food in food_text:
            found_foods.append(food)
            calories += food_data[food]['calories']
            protein += food_data[food]['protein']
            fats += food_data[food]['fats']
            carbs += food_data[food]['carbs']
    
    if found_foods:
        response = f"üìä *–ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è: {message.text}*\n\n"
        response += f"*–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:* {', '.join(found_foods)}\n\n"
        response += f"*–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ 100–≥ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞):*\n"
        response += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} –∫–∫–∞–ª\n"
        response += f"‚Ä¢ –ë–µ–ª–∫–∏: {protein:.1f} –≥\n"
        response += f"‚Ä¢ –ñ–∏—Ä—ã: {fats:.1f} –≥\n"
        response += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f} –≥\n\n"
        response += "‚ö†Ô∏è –≠—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥—Ä–∞–º–º–æ–≤–∫—É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞."
    else:
        response = "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, —è–π—Ü–∞, –º–æ–ª–æ–∫–æ –∏ —Ç.–¥."
    
    bot.reply_to(message, response, parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = "üçΩÔ∏è *PlanEat - –ö–∞–ª–æ—Ä–∏–π–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫*\n\n"
    help_text += "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
    help_text += "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
    help_text += "‚Ä¢ /reg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
    help_text += "‚Ä¢ /plan - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π —Ü–µ–ª–∏\n"
    help_text += "‚Ä¢ /recipe - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –±–ª—é–¥\n"
    help_text += "‚Ä¢ /track - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –≤ –±–ª—é–¥–∞—Ö\n"
    help_text += "‚Ä¢ /healthtip - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é\n"
    help_text += "‚Ä¢ /setreminder - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏\n"
    help_text += "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    help_text += "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
    
    bot.reply_to(message, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['healthtip'])
def send_health_tip(message):
    health_tips = database.get_health_tips()
    if health_tips:
        tip = random.choice(health_tips)
        bot.reply_to(message, f"üí° –°–æ–≤–µ—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é: {tip}")
    else:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é.")

@bot.message_handler(commands=['setreminder'])
def set_meal_reminder(message):
    bot.reply_to(message, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ 8:00, 12:00 –∏ 18:00.")
    schedule.every().day.at("08:00").do(lambda: bot.send_message(message.chat.id, "–í—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å! üç≥"))
    schedule.every().day.at("12:00").do(lambda: bot.send_message(message.chat.id, "–í—Ä–µ–º—è –æ–±–µ–¥–∞—Ç—å! üç≤"))
    schedule.every().day.at("18:00").do(lambda: bot.send_message(message.chat.id, "–í—Ä–µ–º—è —É–∂–∏–Ω–∞—Ç—å! üçΩÔ∏è"))

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

threading.Thread(target=run_scheduler).start()

def main():
    database.init_db()
    test_image_urls()
    logging.info("Bot started")
    bot.infinity_polling()

def test_image_urls():
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
    try:
        recipe = database.get_recipe("–ó–∞–≤—Ç—Ä–∞–∫")
        if recipe and recipe['image_url']:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            response = requests.get(recipe['image_url'], headers=headers, timeout=5)
            if response.status_code == 200 and len(response.content) > 100:
                logging.info("–¢–µ—Å—Ç–æ–≤—ã–π URL —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                logging.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º URL: —Å—Ç–∞—Ç—É—Å {response.status_code}, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {str(e)}")

if __name__ == "__main__":
    main()
